
####################################################################################################
# Import modules
####################################################################################################

import time
from datetime import datetime
import influxdb.exceptions as inexc
import os
from influxdb import InfluxDBClient
from influxdb_client import InfluxDBClient, Point, WritePrecision
from influxdb_client.client.write_api import SYNCHRONOUS

####################################################################################################
# Sensor Definition
####################################################################################################

#can moniter any number of plugs, just add more or less to both 'ip' and 'plug'
ip   = ['192.168.1.21', '192.168.1.22', '192.168.1.23' ]        # Set static IP to your smart plug
plug = ['name1', 'name2', 'name3'] #device name in influxdb
port = 9999             # default port for HS110
sample_time = 10        # seconds
####################################################################################################
# InfluxDB Database Details
####################################################################################################
token = "1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz==" # token generator from influxDB
org = "tldm"
bucket = "Energy Monitering"
dburl = "http://192.168.1.20:8086" #ip of influx db

client = InfluxDBClient(url=dburl, token=token)


####################################################################################################
# Read data
####################################################################################################

def encrypt(string):
    """
    Encrypt the TP-Link Smart Home Protocoll: XOR Autokey Cipher with starting key = 171
    This follows: https://github.com/softScheck/tplink-smartplug
    """
    from struct import pack
    key = 171
    result = pack('>I', len(string))
    for i in string:
        a = key ^ ord(i)
        key = a
        result += bytes([a])
    return result

def decrypt(string):
    """
    Decrypt the TP-Link Smart Home Protocoll: XOR Autokey Cipher with starting key = 171
    This follows: https://github.com/softScheck/tplink-smartplug
    """
    key = 171
    result = ""
    for i in string:
        a = key ^ i
        key = i
        result += chr(a)
    return result

def poll_HS110(ip,port,querymsg, z):
    import socket
    try:
        sock_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock_tcp.settimeout(int(1))
        sock_tcp.connect((ip[z], port))
        sock_tcp.settimeout(None)
        sock_tcp.send(querymsg)
      #  sock_tcp.send(encrypt('{"emeter":{"get_realtime":{}}}'))
        data = sock_tcp.recv(2048)
        sock_tcp.close()
        return data
    except:
        raise ConnectionError("Could not connect to HS110 at IP "+str(ip)+" on port "+str(port))

def decrypt_power(data):
    import json
    try:
        decrypted = decrypt(data[4:])
        decrypt_dict = json.loads(decrypted)
        return {'voltage':      decrypt_dict['emeter']['get_realtime']['voltage_mv']/1000,    # V
                'current':      decrypt_dict['emeter']['get_realtime']['current_ma']/1000,    # A
                'power':        decrypt_dict['emeter']['get_realtime']['power_mw']/1000,      # W
                'energy_total': decrypt_dict['emeter']['get_realtime']['total_wh']/1000,      # kWh
               }
    except:
        raise TypeError("Could not decrypt returned data.")

      
def read_sensor():
    polltime = datetime.now()
    
    try:
        data = poll_HS110(ip, port,querymsg, z)
        data = decrypt_power(data)
       # print(data)
    except ConnectionError:
        print(polltime, "  Error contacting HS110. Passing dummy data.")
        return
        #voltage, current, power, energy_total = None, None, None, None
        error_code = 9999
    except TypeError:
        print(polltime, "  Error decrypting data. Passing dummy data.")
        #voltage, current, power, energy_total = None, None, None, None
        return
        error_code = 9999
    except Exception:
        print(polltime, "  Unknown error. Passing dummy data.")
        voltage, current, power, energy_total = None, None, None, None
        #error_code = 9999                                                           
            
    return data

####################################################################################################
# Send data to influxdb
####################################################################################################
def write_database(client, data, z):
    write_api = client.write_api(write_options=SYNCHRONOUS)
    print(data)     
    Power = data['power']
    Current = data['current']
    Voltage = data['voltage']
    Energy_Total = data['energy_total'] 

    npower = plug[z]+",Measurement=Power Reading="+str(Power)
    ncurrent = plug[z]+",Measurement=Current Reading="+str(Current)
    nvoltage = plug[z]+",Measurement=Voltage Reading="+str(Voltage)
    TEng = plug[z]+",Measurement=Total_Energy Reading="+str(Energy_Total)

    write_api.write(bucket, org, npower)
    write_api.write(bucket, org, ncurrent)
    write_api.write(bucket, org, nvoltage)
    write_api.write(bucket, org, TEng)


####################################################################################################
# Main Program
####################################################################################################
querymsg = encrypt('{"emeter":{"get_realtime":{}}}')
print("starting....")    

try:
    
    while True:
        z=0
        for z in range(0,len(ip)):
            
            try:  
                write_database(client = client, data = read_sensor(), z=z)
            except:
                print(plug[z] + " is offline")
        print("")              
        time.sleep(sample_time)

except KeyboardInterrupt:
    print (datetime.now(), "  Program stopped by keyboard interrupt [CTRL_C] by user. ")

